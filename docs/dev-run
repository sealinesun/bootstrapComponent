#!/usr/bin/env babel-node
/* eslint no-process-exit: 0 */
import 'colors';
import portfinder from 'portfinder';
import { exec } from 'child-process-promise';

portfinder.basePort = 4000;

const SIGINT = 'SIGINT';
let webpackDevServer;
let docsServer;

function output(prefix, message) {
  let formattedMessage = message.trim().split('\n')
    .reduce((acc, line) => `${acc}${ acc !== '' ? '\n' : '' }${prefix} ${line}`, '');

  console.log(formattedMessage);
}

function listen({stdout, stderr}, name) {
  stdout.on('data', data => output(`[${name}] `.grey, data));
  stderr.on('data', data => output(`[${name}] `.grey, data));
}

function shutdown() {
  if (webpackDevServer) {
    webpackDevServer.kill(SIGINT);
  }
  if (docsServer) {
    docsServer.kill(SIGINT);
  }
}

function catchExec(name, err) {
  if (err.killed) {
    console.log('Shutdown: '.cyan + name.green);
  } else {
    console.log(`${name} -- Failed`.red);
    console.log(err.toString().red);
  }
  shutdown();
}

console.log('Starting docs in Development mode'.cyan);

process.on(SIGINT, shutdown);

portfinder.getPorts(2, {}, (portFinderErr, [docsPort, webpackPort]) => {
  if (portFinderErr) {
    console.log('Failed to acquire ports'.red);
    process.exit(1);
  }

  exec(`webpack-dev-server --quiet --config webpack.docs.js --color --port ${webpackPort}`)
    .progress(childProcess => {
      listen(childProcess, 'webpack-dev-server');
      webpackDevServer = childProcess;
      return;
    })
    .then(() => console.log('Shutdown: '.cyan + 'webpack-dev-server'.green))
    .catch(err => catchExec('webpack-dev-server', err));

  exec('nodemon --exec babel-node docs/server.js', {
      env: {
        PORT: docsPort,
        WEBPACK_DEV_PORT: webpackPort,
        ...process.env
      }
    })
    .progress(childProcess => {
      listen(childProcess, 'docs-server');
      docsServer = childProcess;
      return;
    })
    .then(() => console.log('Shutdown: '.cyan + 'docs-server'.green))
    .catch(err => catchExec('docs-server', err));
});

